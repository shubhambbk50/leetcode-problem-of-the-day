134. Gas Station
Medium
8.3K
729
Companies
There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].

You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.

Given two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique

 

Example 1:

Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]
Output: 3
Explanation:
Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 4. Your tank = 4 - 1 + 5 = 8
Travel to station 0. Your tank = 8 - 2 + 1 = 7
Travel to station 1. Your tank = 7 - 3 + 2 = 6
Travel to station 2. Your tank = 6 - 4 + 3 = 5
Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.
Therefore, return 3 as the starting index.
Example 2:

Input: gas = [2,3,4], cost = [3,4,3]
Output: -1
Explanation:
You can't start at station 0 or 1, as there is not enough gas to travel to the next station.
Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 0. Your tank = 4 - 3 + 2 = 3
Travel to station 1. Your tank = 3 - 3 + 3 = 3
You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.
Therefore, you can't travel around the circuit once no matter where you start.
 

Constraints:

n == gas.length == cost.length
1 <= n <= 105
0 <= gas[i], cost[i] <= 104
Accepted
509.6K
Submissions
1.1M
Acceptance Rate
45.5%

CODE:-

class Solution {
public:
    int canCompleteCircuit(vector<int>& gas, vector<int>& cost) {
/*        Intuition
Here we will apply greedy approach

Approach
In the question given that
If there exists a solution, it is guaranteed to be unique
-This lines clearly tells us that we have unique or no solution exists

Here two cases are possible

if our total_gas is less than our total cost in that case we can't complete our journey ,so will return -1
Now we have a unique solution that means single starting_point exists
To find that point we will keep track of my current_gas+=gas[i]-cost[i]
lets suppose at any index our current gas became negative so we can clearly say that till that index all the gas station between ith and starting point are bad, starting point as well.
So, this means we can start trying at next gas_station on the i+1 station
Complexity
Time complexity:O(N)
Space complexity:O(1) */


        int n = gas.size();
        int sumgas=0, sumcost=0, currgas=0, startingpoint=0;
        for( int i=0; i<n; i++ ){
            //these two variable are to check if no case is possible
            sumgas += gas[i];
            sumcost += cost[i];
            currgas += gas[i] - cost[i];
            if( currgas < 0 ){
               //there is a breakdown....so we will start from next point or index
                startingpoint = i+1;
                //reset our fuel
                currgas=0;
            }
        }
        return ( sumcost > sumgas) ? -1 : startingpoint;
    }
};
